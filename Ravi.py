import base64
exec(base64.b64decode(b'IyEvdXNyL2Jpbi9weXRob24zCiMtKi1jb2Rpbmc6dXRmLTgtKi0KIyEvdXNyL2Jpbi9weXRob24zCmltcG9ydCBvcyx0aW1lLHJhbmRvbSxzdHJpbmcscmUsc3lzLHJlcXVlc3RzLGpzb24sdXVpZApmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIFRocmVhZFBvb2wKdHJ5Om9zLnN5c3RlbSgicGtnIGluc3RhbGwgZXNwZWFrIikKZXhjZXB0OnBhc3MKZnJvbSBwbGF0Zm9ybSBpbXBvcnQgc3lzdGVtCmltcG9ydCBzeXMKaW1wb3J0IG9zCmltcG9ydCBkYXRldGltZSAgIApmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCgoKZGVmIHRlc3RQWSgpOgogICAgaWYoc3lzLnZlcnNpb25faW5mb1swXSA8IDMpOgogICAgICAgIHByaW50ICgnXG5cdCBbK10gWW91IGhhdmUgUHl0aG9uIDIsIFBsZWFzZSBDbGVhciBEYXRhIFRlcm11eCBBbmQgUmVpbnN0YWxsIFB5dGhvbiAuLi4gXG4nKQogICAgICAgIHN5cy5leGl0KCkKCgpkZWYgbW9kZWxzSW5zdGFsbGVyKCk6CiAgICB0cnk6CiAgICAgICAgbW9kZWxzID0gWydyZXF1ZXN0cycsICdjb2xvcmFtYSddCiAgICAgICAgZm9yIG1vZGVsIGluIG1vZGVsczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaWYoc3lzLnZlcnNpb25faW5mb1swXSA8IDMpOgogICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgnY2QgQzpcUHl0aG9uMjdcU2NyaXB0cyAmIHBpcCBpbnN0YWxsIHt9Jy5mb3JtYXQobW9kZWwpKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ3B5dGhvbiAtbSBwaXAgaW5zdGFsbCB7fScuZm9ybWF0KG1vZGVsKSkKICAgICAgICAgICAgICAgIHByaW50KCcgJykKICAgICAgICAgICAgICAgIHByaW50KCdbK10ge30gaGFzIGJlZW4gaW5zdGFsbGVkIHN1Y2Nlc3NmdWxseSwgUmVzdGFydCB0aGUgcHJvZ3JhbS4nLmZvcm1hdChtb2RlbCkpCiAgICAgICAgICAgICAgICBzeXMuZXhpdCgpCiAgICAgICAgICAgICAgICBwcmludCgnICcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KCdbLV0gSW5zdGFsbCB7fSBtYW51YWxseS4nLmZvcm1hdChtb2RlbCkpCiAgICAgICAgICAgICAgICBwcmludCgnICcpCiAgICBleGNlcHQ6CiAgICAgICAgcGFzcwoKCmltcG9ydCBiYXNlNjQKaW1wb3J0IGpzb24KaW1wb3J0IHRpbWUKaW1wb3J0IHN5cwppbXBvcnQgb3MKaW1wb3J0IHJlCmltcG9ydCBiaW5hc2NpaQppbXBvcnQgdGltZQppbXBvcnQganNvbgppbXBvcnQgcmFuZG9tCmltcG9ydCB0aHJlYWRpbmcKaW1wb3J0IHBwcmludAppbXBvcnQgc210cGxpYgppbXBvcnQgdGVsbmV0bGliCmltcG9ydCBvcy5wYXRoCmltcG9ydCBoYXNobGliCmltcG9ydCBzdHJpbmcKaW1wb3J0IGdsb2IKaW1wb3J0IHNxbGl0ZTMKaW1wb3J0IHVybGxpYgppbXBvcnQgYXJncGFyc2UKaW1wb3J0IG1hcnNoYWwKaW1wb3J0IGRhdGV0aW1lICAgCmZyb20gcGxhdGZvcm0gaW1wb3J0IHN5c3RlbQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQoKdHJ5OgogICAgaW1wb3J0IHJlcXVlc3RzCiAgICBmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlCiAgICBmcm9tIGNvbG9yYW1hIGltcG9ydCBpbml0CmV4Y2VwdDoKICAgIG1vZGVsc0luc3RhbGxlcigpCgpyZXF1ZXN0cy51cmxsaWIzLmRpc2FibGVfd2FybmluZ3MoKQoKZGVmIGNscygpOgogICAgaWYgc3lzdGVtKCkgPT0gJ0xpbnV4JzoKICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIGVsc2U6CiAgICAgICAgaWYgc3lzdGVtKCkgPT0gJ1dpbmRvd3MnOgogICAgICAgICAgICBvcy5zeXN0ZW0oJ2NscycpCgoKY2xzKCkKQ0xFQVJfU0NSRUVOID0gJ1wwMzNbMkonClJFRCA9ICdcMDMzWzE7Mzc7MW0nICAjIG1vZGUgMzEgPSByZWQgZm9yZWdyb3VuZApSRVNFVCA9ICdcMDMzWzE7Mzc7MW0nICAjIG1vZGUgMCAgPSByZXNldApCTFVFID0gIlwwMzNbMTszNzsxbSIKV0hJVEUgPSAiXDAzM1sxOzM3OzFtIiwKWUVMTE9XID0gIlwwMzNbMTszNzsxbSIsCkNZQU4gPSAiXDAzM1sxOzM3OzFtIgpNQUdFTlRBID0gIlwwMzNbMTszNzsxbSIsCkdSRUVOID0gIlwwMzNbMTszNzsxbSIKUkVTRVQgPSAiXDAzM1sxOzM3OzFtIgpCT0xEID0gJ1wwMzNbMTszNzsxbScKUkVWRVJTRSA9ICJcMDMzWzE7Mzc7MW0iCgpkZWYgbG9nbygpOgogICAgY2xlYXIgPSAiXHgxYlswbSIKICAgIGNvbG9ycyA9IFszNSwgMzMsIDM2XQoKICAgIHggPSAiIiIgICAKCgogIC8kJCQkJCQgIC8kJCAgIC8kJCAgLyQkJCQkJCAgIC8kJCQkJCQgIC8kJCAgIC8kJAogLyQkX18gICQkfCAkJCAgLyQkLyAvJCRfXyAgJCQgLyQkX18gICQkfCAkJCAgfCAkJAp8ICQkICBcICQkfCAkJCAvJCQvIHwgJCQgIFwgJCR8ICQkICBcX18vfCAkJCAgfCAkJAp8ICQkJCQkJCQkfCAkJCQkJC8gIHwgJCQkJCQkJCR8ICAkJCQkJCQgfCAkJCQkJCQkJAp8ICQkX18gICQkfCAkJCAgJCQgIHwgJCRfXyAgJCQgXF9fX18gICQkfCAkJF9fICAkJAp8ICQkICB8ICQkfCAkJFwgICQkIHwgJCQgIHwgJCQgLyQkICBcICQkfCAkJCAgfCAkJAp8ICQkICB8ICQkfCAkJCBcICAkJHwgJCQgIHwgJCR8ICAkJCQkJCQvfCAkJCAgfCAkJAp8X18vICB8X18vfF9fLyAgXF9fL3xfXy8gIHxfXy8gXF9fX19fXy8gfF9fLyAgfF9fLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgoiIiIKICAgIGZvciBOLCBsaW5lIGluIGVudW1lcmF0ZSh4LnNwbGl0KCJcbiIpKToKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJceDFiWzE7JWRtJXMlc1xuIiAlIChyYW5kb20uY2hvaWNlKGNvbG9ycyksIGxpbmUsIGNsZWFyKSkKICAgICAgICB0aW1lLnNsZWVwKDAuMDcpCmRlZiBtZW51MygpOgogICAgdHJ5OgogICAgICAgIHVpZD1vcy5nZXR1aWQoKSNhdXRvIGtleSBnYXJuZXQgYnkgdGVybXV4IHVpZAogICAgICAgIHh4ID0gKCdsaWJzb29uZXkuc28nKQogICAgICAgIHRyeToKICAgICAgICAgICAga2V5MT1vcGVuKGYnL2RhdGEvZGF0YS9jb20udGVybXV4L2ZpbGVzL3Vzci9iaW4ve3h4fScsJ3InKS5yZWFkKCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIAogICAgICAgICAgICBrZXkxPW9wZW4oZicvZGF0YS9kYXRhL2NvbS50ZXJtdXgvZmlsZXMvdXNyL2Jpbi97eHh9JywndycpLndyaXRlKGtleTEpCiAgICAgICAga2sgPSAoJ2dpdGh1YicpCiAgICAgICAgazEgPSAoJ2FwdmwteHgnKQogICAgICAgIGsyID0gKCd4ZC50eHQnKQogICAgICAgIGszID0gKCd0b2tlbi50eHQnKQogICAgICAgIGtleTE9b3BlbihmJy9kYXRhL2RhdGEvY29tLnRlcm11eC9maWxlcy91c3IvYmluL3t4eH0nLCdyJykucmVhZCgpCiAgICAgICAga2V5PShmJ0FLQVNILVhELVlXUi1BUFJVQUwtRE97dWlkfTVYe2tleTF9MTEwRT09JykjZnVsbCBrZXkKICAgICAgICBteXNpdGU9IHJlcXVlc3RzLmdldChmJ2h0dHBzOi8vZ2l0aHViLmNvbS9PUC1BS0FTSC9BS0FTSC9ibG9iL21haW4vQXBwcm92YWwudHh0JykudGV4dCNhcHByb3ZlIHNpdGUKICAgICAgICBpZiBrZXkgaW4gbXlzaXRlOgogICAgICAgICAgICAgICAgcHJpbnQobG9nbykKICAgICAgICAgICAgICAgIHByaW50KGYnWytdIENvbmdyZWdhdGlvbnMhIFlvdXIgUHJlbWl1bSBVc2VyLi4uJyk7dGltZS5zbGVlcCgyKQogICAgICAgICAgICAgICAgcHJpbnQobG9nbykKICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgnZXNwZWFrIC1hIDMwMCAid2VsbCxjb21lIHRvLCDgpI/gpJXgpY3gpLggICAgICAgICAgICAgICAgICAgICAgICAgIOCkoeClgCAgICAgICAgICAgICAgICAgICAgICAgICAgIOCkhuCkleCkvuCktiAsIHRvb2xzIicpCiAgICAgICAgICAgICAgICBwcmludChmIiIiXHgxYlsxOzk3bSAKXDAzM1sxOzMzbSAvJCQkJCQkICAvJCQgICAvJCQgIC8kJCQkJCQgICAvJCQkJCQkICAvJCQgICAvJCQKXDAzM1sxOzMybSAvJCRfXyAgJCR8ICQkICAvJCQvIC8kJF9fICAkJCAvJCRfXyAgJCR8ICQkICB8ICQkClwwMzNbMTszM218ICQkICBcICQkfCAkJCAvJCQvIHwgJCQgIFwgJCR8ICQkICBcX18vfCAkJCAgfCAkJApcMDMzWzE7MzJtfCAkJCQkJCQkJHwgJCQkJCQvICB8ICQkJCQkJCQkfCAgJCQkJCQkIHwgJCQkJCQkJCQKXDAzM1sxOzMzbXwgJCRfXyAgJCR8ICQkICAkJCAgfCAkJF9fICAkJCBcX19fXyAgJCR8ICQkX18gICQkClwwMzNbMTszMm18ICQkICB8ICQkfCAkJFwgICQkIHwgJCQgIHwgJCQgLyQkICBcICQkfCAkJCAgfCAkJApcMDMzWzE7MzNtfCAkJCAgfCAkJHwgJCQgXCAgJCR8ICQkICB8ICQkfCAgJCQkJCQkL3wgJCQgIHwgJCQKXDAzM1sxOzMybXxfXy8gIHxfXy98X18vICBcX18vfF9fLyAgfF9fLyBcX19fX19fLyB8X18vICB8X18vClx4MWJbMTszMG3ilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAKXDAzM1sxOzMxbeKWh+KepCBBRE1JTiAgICAgICA6IEFLQVNIIFhEClwwMzNbMTszN23ilofinqQgR0lUSFVCICAgICAgICA6IEFLQVNIIFhEClwwMzNbMTszMW3ilofinqQgQ1JFQVRPUiAgICAgICAgOiBTLU5FSEEgVEgzIEwzRzNORCBHSUlSTApcMDMzWzE7Mzdt4paH4p6kIEZBQ0VCT09LICAgICAgICAgIDogT1AgQUtBU0ggWEQKXHgxYlsxOzMwbeKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkApcMDMzWzE7MzNtW+KAol0gMDEgIFNUQVJUIFRPT0wgQUREIEZCIElEXDAzM1sxOzM2bQpcMDMzWzE7MzJtW+KAol0gMDIgIFNUQVJUIFRPT0wgVE9LQU4gQ09OVk9cMDMzWzE7MzZtClwwMzNbMTszMG1b4oCiXSAwMCAgRVhJVCBUT09MIFwwMzNbMTszNm0KCuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIiIikKICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgnZXNwZWFrIC1hIDMwMCAiT0ZTQU4gQ0hVTkUgICAgICAgICAgICAgICAgICAgICBPTkUgICAgICAgICAgICAgICAgICAgICBZQSAgICAgICAgICAgICAgICAgICAgIFRXTyAgICAgICAgICAgICAgICAgICAgIFlBICAgICAgICAgICAgICAgICAgICAgWkVSTyInKQogICAgICAgICAgICAgICAga2V5ID0gaW5wdXQoIlsrXSBDaG9vc2UgOiAiKSAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIGtleSBpbiBbIiJdOgogICAgICAgICAgICAgICAgICAgIHByaW50KCIow5cpIFBsZWFzZSBTZWxlY3QgQ29ycmVjdCBPcHRpb24iKQogICAgICAgICAgICAgICAgICAgIGxvZ28oKQogICAgICAgICAgICAgICAgZWxpZiBrZXkgaW4gWyIxIiwiMDEiXToKICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oImFtIHN0YXJ0IGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9wcm9maWxlLnBocD9pZD02MTU1NDkyODY4NDU4NSZtaWJleHRpZD1aYldLd0wiK2tleSkgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBlbGlmIGtleSBpbiBbIjAiLCIwMCIsIkUiLCJlIl06CiAgICAgICAgICAgICAgICAgICAgZXhpdCgnXDAzM1sxOzMybVs+XSBUaGFuayBZb3UgJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1vDl10gQ2hvb3NlIENvcnJlY3QgT3B0aW9uJyk7dGltZS5zbGVlcCgxKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludChsb2dvKQogICAgICAgICAgICAgICAgcHJpbnQoZidb4oCiXSBZb3VyIEtleSBOb3QgUmVnaXN0ZXJkLi4uJykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcHJpbnQoZidb4oCiXSBUaGlzIFRvb2xzIE9ubHkgRm9yIFBhaWQgVXNlcnMgXG5b4oCiXSBGcmVlIFVzZXJzIFNhdHkgQSBXYXknKQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdlc3BlYWsgLWEgMzAwICJ3ZWxsLGNvbWUgdG8sIEFBS0FBU0gsIHRvb2xzIicpCiAgICAgICAgICAgICAgICBwcmludChmJ1vigKJdIFlvdXIgS2V5IDogJytrZXkpCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oImFtIHN0YXJ0IGh0dHBzOi8vd2EubWUvKzkxOTM2NjgzMDUwMj90ZXh0PSIra2V5KQogICAgICAgICAgICAgICAgaW5wdXQoZidbXSBQcmVzcyBFbnRlciBGb3IgQXBwcm92ZSAnKSAgICAKICAgICAgICAgICAgICAgIHdoYXRzYXBwID0gIis5MTkzNjY4MzA1MDIiCiAgICAgICAgICAgICAgICB1cmxfd2EgPSAiaHR0cHM6Ly9hcGkud2hhdHNhcHAuY29tL3NlbmQ/cGhvbmU9Iit3aGF0c2FwcCsiJnRleHQ9IgogICAgICAgICAgICAgICAgdGtzID0gKCJIZWxsbyBSSUFaIFNpciwgSSBOZWVkIFRvIEJ1eSBZb3VyIFBhaWQgVG9vbHMgUGxlYXNlIEFwcHJvdmUgTXkgS2V5IDopXG5cbiBLZXkgOi0gIitrZXkpCiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLmNoZWNrX291dHB1dChbImFtIiwgInN0YXJ0IiwgdXJsX3dhKyh0a3MpXSk7dGltZS5zbGVlcCgyKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBwcmludChmJ3J1biA6ICBweXRob24gUklBWi5weScpO3Bhc3MKICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIHByaW50KCcnKTtwYXNzCgoKbWVudTMoKSAgICAgICAgCgp0ZXN0UFkoKQpwcmludCgnJydcMDMzWzE7MzNt4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4nJycpCmRlZiB2ZW5vbSgpOgogICAgY2xlYXIgPSAiXHgxYlswbSIKICAgIGNvbG9ycyA9IFszNSwgMzMsIDM2XQoKICAgIHkgPSAnJycKXDAzM1sxOzMzbeKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkApcMDMzWzE7MzFtIE40TUUgICAgXDAzM1sxOzM0bTogXDAzM1sxOzMzbUFLQVNIIEgzUjMgICAgICAgICAgICAgICAgICAgICAgICAKXDAzM1sxOzM2bSBDckVhVG9SICBcMDMzWzE7MzVtOiBcMDMzWzE7MzRtTDNHM05EIFNOM0g0ICAgICAgICAgICAgICAgICAgICAgICAKXDAzM1sxOzMxbSBPV04zUiAgIFwwMzNbMTszNm06IFwwMzNbMTszNW1PUCBBS0FTSApcMDMzWzE7MzZtIENvbnRhY3QgXDAzM1sxOzMzbTogXDAzM1sxOzM2bSs5MTkzNjY4MzA1MDIKXDAzM1sxOzMzbeKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkAoKJycnCiAgICBmb3IgTiwgbGluZSBpbiBlbnVtZXJhdGUoeS5zcGxpdCgiXG4iKSk6CiAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXHgxYlsxOyVkbSVzJXNcbiIgJSAocmFuZG9tLmNob2ljZShjb2xvcnMpLCBsaW5lLCBjbGVhcikpCiAgICAgICAgdGltZS5zbGVlcCgwLjA1KQogICAgCQp2ZW5vbSgpCgoKaGVhZGVycyA9IHsKICAgICdDb25uZWN0aW9uJzogJ2tlZXAtYWxpdmUnLAogICAgJ0NhY2hlLUNvbnRyb2wnOiAnbWF4LWFnZT0wJywKICAgICdVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzJzogJzEnLAogICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDguMC4wOyBTYW1zdW5nIEdhbGF4eSBTOSBCdWlsZC9PUFI2LjE3MDYyMy4wMTc7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTguMC4zMDI5LjEyNSBNb2JpbGUgU2FmYXJpLzUzNy4zNicsCiAgICAnQWNjZXB0JzogJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgnLAogICAgJ0FjY2VwdC1FbmNvZGluZyc6ICdnemlwLCBkZWZsYXRlJywKICAgICdBY2NlcHQtTGFuZ3VhZ2UnOiAnZW4tVVMsZW47cT0wLjksZnI7cT0wLjgnLAogICAgJ3JlZmVyZXInOiAnd3d3Lmdvb2dsZS5jb20nCn0KCgpkZWYgbWVzc2FnZV9vbl9tZXNzZW5nZXIobWVzc2FnZSk6CiAgICBmb3IgaSBpbiBuczoKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1lc3NhZ2UgPSBzdHIobW4pICsgaQogICAgICAgICAgICB1cmwgPSAiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vdjE1LjAvezB9LyIuZm9ybWF0KCd0XycgKyBzdHIodGhyZWFkX2lkKSkKICAgICAgICAgICAgcGFyYW1ldGVycyA9IHsnYWNjZXNzX3Rva2VuJzogYWNjZXNzX3Rva2VuLCAnbWVzc2FnZSc6IG1lc3NhZ2V9CiAgICAgICAgICAgIHMgPSByZXF1ZXN0cy5wb3N0KHVybCwgZGF0YT1wYXJhbWV0ZXJzLCBoZWFkZXJzPWhlYWRlcnMpCiAgICAgICAgICAgIHR0ID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVZLSVtLSVkICVJOiVNOiVTICVwIikKICAgICAgICAgICAgCgogICAgICAgICAgICBpZiBzLm9rOgogICAgICAgICAgICAgICAgZSA9ZGF0ZXRpbWUubm93KCkKICAgICAgICAgICAgICAgIHByaW50KCcnJ1wwMzNbMTszM23ilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZBcbicnJykKICAgICAgICAgICAgICAgIHByaW50KCJcMDMzWzE7MzI7NDBtIiwgZW5kID0gIiIpCiAgICAgICAgICAgICAgICBwcmludCgiLS0+IENvbnZvIE9yIEluYm94IEknZCBMaW5rICA6LS0iLCB0aHJlYWRfaWQpCiAgICAgICAgICAgICAgICBwcmludCAoZS5zdHJmdGltZSgiLS0+IEQ0UklJTkQ0IEFLQVNIIEgzUjMgOkQgfCB8IERhdGUgOjogJWQtJW0tJVkgIFRJTUUgOjogJUk6JU06JVMgJXAiKSkKICAgICAgICAgICAgICAgIHByaW50KCItLT4gTWVzc2FnZSBTdWNjZXNzZnVsbHkgU2VudCBCeSBMRUdFTkQgU05FSEEgOkQgOjotLT4+ICIsIG1lc3NhZ2UsICJcbiIpCiAgICAgICAgICAgICAgICBwcmludCgnJydcMDMzWzE7MzNt4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4nJycpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHRpbW0pCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludCgnXDAzM1sxOzMybVt4XSBNZXNzYWdlIEJsb2NrICcgKyB0dCwgJ1xuW8OXXSBUb2tlbiBFcnJvclxuJykKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMzApCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludCgiXDAzM1sxOzMxOzQwbSIsIGVuZCA9ICIiKQogICAgICAgICAgICBwcmludChlICwgJ1xuJykgICAgICAgICAgIAogICAgICAgICAgICB0aW1lLnNsZWVwKDMwKQoKZGVmIGdldF9tZXNzYWdlcygpOgogICAgdHJ5OgogICAgICAgIHVybCA9ICJodHRwczovL3d3dy5mYWNlYm9vay5jb20iCiAgICBleGNlcHQgSFRUUEVycm9yIGFzIGU6CiAgICAgICAgcHJpbnQoIkhUVFAgRXJyb3IiKQogICAgZXhjZXB0IFVSTEVycm9yIGFzIGU6CiAgICAgICAgcHJpbnQoIlVSTCBFcnJvciIpCgoKaWYgaW50OiAgICAKICAgIGkgPSBkYXRldGltZS5ub3coKQogICAgcHJpbnQoaS5zdHJmdGltZSgiXDAzM1sxOzMybVvigKJdIFN0YXJ0IFRpbWUgPT0+ICVZLSVtLSVkICVJOiVNOiVTICVwICIpKQogICAgcHJpbnQoJycnXDAzM1sxOzMybVvigKJdIF8gVG9vbCBDcmVhdG9yID09ID4gWyBUaGUgTGVnZW5kIFNuZWhhIHh3ZCBdXG4nJycpCiAgICBwcmludCgiXDAzM1sxOzM2OzQwbSIsIGVuZCA9ICIiKQogICAgcHJpbnQoZiIiIlx4MWJbMTs5N20gClwwMzNbMTszM20gIC8kJCQkJCQgIC8kJCAgIC8kJCAgLyQkJCQkJCAgIC8kJCQkJCQgIC8kJCAgIC8kJApcMDMzWzE7MzJtIC8kJF9fICAkJHwgJCQgIC8kJC8gLyQkX18gICQkIC8kJF9fICAkJHwgJCQgIHwgJCQKXDAzM1sxOzMzbXwgJCQgIFwgJCR8ICQkIC8kJC8gfCAkJCAgXCAkJHwgJCQgIFxfXy98ICQkICB8ICQkClwwMzNbMTszMm18ICQkJCQkJCQkfCAkJCQkJC8gIHwgJCQkJCQkJCR8ICAkJCQkJCQgfCAkJCQkJCQkJApcMDMzWzE7MzNtfCAkJF9fICAkJHwgJCQgICQkICB8ICQkX18gICQkIFxfX19fICAkJHwgJCRfXyAgJCQKXDAzM1sxOzMybXwgJCQgIHwgJCR8ICQkXCAgJCQgfCAkJCAgfCAkJCAvJCQgIFwgJCR8ICQkICB8ICQkClwwMzNbMTszM218ICQkICB8ICQkfCAkJCBcICAkJHwgJCQgIHwgJCR8ICAkJCQkJCQvfCAkJCAgfCAkJApcMDMzWzE7MzJtfF9fLyAgfF9fL3xfXy8gIFxfXy98X18vICB8X18vIFxfX19fX18vIHxfXy8gIHxfXy8KXHgxYlsxOzM0beKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkApcMDMzWzE7MzFt4paH4p6kIEFETUlOICAgICAgIDogQUtBU0gtWEQKXDAzM1sxOzM3beKWh+KepCBHSVRIVUIgICAgICAgIDogQUtBU0gtWEQKXDAzM1sxOzMxbeKWh+KepCBPV05FUiAgICAgICAgOiBBS0FTSC1YRApcMDMzWzE7Mzdt4paH4p6kIEZBQ0VCT09LICAgICAgICAgIDogTEVHRU5EIEJPWSBBS0FTSApceDFiWzE7MzRt4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIiIiKQogICAgb3Muc3lzdGVtKCdlc3BlYWsgLWEgMzAwICJUT0tBTiBGSUxFIE5BTUUgREFMTyInKQogICAgdG9rZW4gPSBpbnB1dCgiWytdIElucHV0IFRva2VuIEZpbGUgTmFtZSA6OiAiKQogICAgcHJpbnQoJ1xuJykKICAgIHdpdGggb3Blbih0b2tlbiwgJ3InKSBhcyBmMjoKICAgICAgICBhY2Nlc3NfdG9rZW4gPSBmMi5yZWFkKCkKICAgICAgICBwYXlsb2FkID0geydhY2Nlc3NfdG9rZW4nOiBhY2Nlc3NfdG9rZW59CiAgICAgICAgYSA9ICJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTUuMC9tZSIKICAgICAgICBiID0gcmVxdWVzdHMuZ2V0KGEsIHBhcmFtcz1wYXlsb2FkKQogICAgICAgIGQgPSBqc29uLmxvYWRzKGIudGV4dCkKICAgICAgICBpZiAnbmFtZScgbm90IGluIGQ6CiAgICAgICAgICAgIHByaW50KEJPTEQgKyBSRUQgKyAnXG5beF0gVG9rZW4gSW52YWxpZC4uISEnKQogICAgICAgICAgICBzeXMuZXhpdCgpCiAgICAgICAgbWIgPSBkWyduYW1lJ10KICAgICAgICBwcmludCgnXDAzM1sxOzMybVlvdXIgUHJvZmlsZSBOYW1lIDo6IFwwMzNbMTszMjsxbSVzJyAlIChtYikpCiAgICAgICAgcHJpbnQoJ1xuJykKICAgICAgICBvcy5zeXN0ZW0oJ2VzcGVhayAtYSAzMDAgIkNPTlZPIElEIERBTE8gSkFIQSBHQUxJIERFTkkgSEEiJykKICAgICAgICB0aHJlYWRfaWQgPSBpbnB1dChCT0xEICsgQ1lBTiArICJcMDMzWzE7MzZtWytdIENvbnNlcnZhdGlvbiBJRCA6OiBcMDMzWzE7MzI7MW0iKQogICAgICAgIG9zLnN5c3RlbSgnZXNwZWFrIC1hIDMwMCAiVEFURSBLQSBOQU1FIERBTE8iJykKICAgICAgICBtbj0gaW5wdXQoQk9MRCArIENZQU4gKyAiXDAzM1sxOzM2bVsrXSBFbnRlciBLaWR4IE5hbWUgOjogXDAzM1sxOzMyOzFtIikKICAgICAgICBvcy5zeXN0ZW0oJ2VzcGVhayAtYSAzMDAgIkdBTEkgRklMRSBEQUxPIicpCiAgICAgICAgbXMgPSBpbnB1dChCT0xEICsgQ1lBTiArICJcMDMzWzE7MzZtWytdIEFkZCBHYWxpIEZpbGUgTmFtZSA6OiBcMDMzWzE7MzI7MW0iKQogICAgICAgIG9zLnN5c3RlbSgnZXNwZWFrIC1hIDMwMCAiRklMRSBLSVROSSBCQUFSIFJFUElUIEtBUkFOSSBIQSInKQogICAgICAgIHJlcGVhdCA9IGludChpbnB1dChCT0xEICsgQ1lBTiArICJcMDMzWzE7MzZtWytdIEZpbGUgUmVwZWF0IE5vIDo6IFwwMzNbMTszMjsxbSIpKQogICAgICAgIG9zLnN5c3RlbSgnZXNwZWFrIC1hIDMwMCAiU1BFRUQgREFMTyBZQVIiJykKICAgICAgICB0aW1tID0gaW50KGlucHV0KEJPTEQgKyBDWUFOICsgIlwwMzNbMTszNm1bK10gU3BlZWQgaW4gU2Vjb25kcyA6OiBcMDMzWzE7MzI7MW0iKSkKICAgICAgICBwcmludCgnXG4nKQogICAgICAgIHByaW50KCcnJ1wwMzNbMTszNG1fX19fX19fX0FsbCBEb25lLi4uLkxvYWRpbmcgUHJvZmlsZSBJbmZvLi4uLi4hJycnKQogICAgICAgIHByaW50KCdcMDMzWzE7MzRtWW91ciBQcm9maWxlIE5hbWUgOjogJywgbWIpCiAgICAgICAgcHJpbnQoJ1xuJykKICAgICAgICBucyA9IG9wZW4obXMsICdyJykucmVhZGxpbmVzKCkKCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UocmVwZWF0KToKICAgICAgICAgICAgbWVzc2VuZ2VyID0gZ2V0X21lc3NhZ2VzKCkKICAgICAgICAgICAgbWVzc2FnZV9vbl9tZXNzZW5nZXIodGhyZWFkX2lkKQplbHNlOgoJcHJpbnQoQk9MRCtSRUQrJ1stXSA8PT0+IFlvdXIgTnVtYmVyIElzIFdyb25nIFBsZWFzZSBUYWtlIEFwcHJvdmFsIEZyb20gT3duZXInKQ=='))
